/*
 * clock.cpp
 *
 *  Created on: May 24, 2016
 *      Author: HyunJae
 */

#include "clock.h"

using namespace std;


string
getCurrentTime(appdata_s *ad){

	string header = "<align=center>";
	string tail = "</align>";
	string millisecond = std::to_string(ad->milliseconds);

	int seconds = ad->milliseconds /100;
	int minutes = seconds/60;
	int milli = ad->milliseconds%100;
	seconds %=60;

	string min;
	string sec;
	string mil;

	if(minutes < 10){
		 min = "0" + std::to_string(minutes);
	}else{
		 min = std::to_string(minutes);
	}


	if(seconds < 10){
		sec = "0" + std::to_string(seconds);
	}else{
		sec = std::to_string(seconds);
	}

	if(milli < 10){
		mil = "0" + std::to_string(milli);
	}else{
		mil = std::to_string(milli);
	}


	string result = min +":"+sec +":" + mil;

	return result;

}

Eina_Bool
ticktock(void *data) {


	appdata_s *ad =  static_cast<appdata_s*>(data);
	ad->milliseconds +=5;

	const char * message = getCurrentTime(ad).c_str();


	/* Label */
	elm_object_text_set(ad->content, message);



    return ECORE_CALLBACK_RENEW;
 }

static Evas_Event_Flags
start_stopCB(void *data, void *event_info)
{
   appdata_s *ad =  static_cast<appdata_s*>(data);
   	if(ad->start){
   		ecore_timer_freeze(ad->timer);
   		ad->start = false;
//   		elm_object_text_set(ad->startButton, "START");
   	}else{
   		ecore_timer_thaw(ad->timer);
   		ad->start = true;
//   		elm_object_text_set(ad->startButton, "STOP");
   	}
   return EVAS_EVENT_FLAG_ON_HOLD;
}


static Evas_Event_Flags
resetCB(void *data, void *event_info)
{

	appdata_s *ad =  static_cast<appdata_s*>(data);


	ad->start = false;
	ad->milliseconds = 0;
	ecore_timer_reset(ad->timer);
	ecore_timer_freeze(ad->timer);
	elm_object_text_set(ad->content, "<align=center>00:00:00</align>");
//	elm_object_text_set(ad->startButton, "START");

   return EVAS_EVENT_FLAG_ON_HOLD;
}



void
make_clock(appdata_s *ad){


	Evas_Object *nf = ad->navi;


	/*  MAKE CLOCK UI **/
	/* BOX */
	ad->box = elm_box_add(nf);
	evas_object_size_hint_weight_set(ad->box, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
	elm_box_align_set(ad->box, 0.5, 0.5);
	evas_object_show(ad->box);
	elm_win_resize_object_add(nf, ad->box);

	/* Label */
	ad->title = elm_label_add(ad->box);
	elm_object_text_set(ad->title, "<align=center>Presentor</align>");
	evas_object_size_hint_weight_set(ad->title, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
	evas_object_show(ad->title);
	elm_box_pack_end(ad->box, ad->title);

	/* Label */
	ad->content = elm_label_add(ad->box);
	elm_object_text_set(ad->content, "<align=center>00:00:00</align>");
	evas_object_size_hint_weight_set(ad->content, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
	evas_object_show(ad->content);
	elm_box_pack_end(ad->box, ad->content);

	/* Gesture Layout add */
	ad->gesture = elm_gesture_layer_add(ad->content);
	elm_gesture_layer_attach(ad->gesture, ad->content);

	/* Button Box */
	ad->buttonBox =elm_box_add(ad->box);
	evas_object_size_hint_weight_set(ad->buttonBox, EVAS_HINT_EXPAND, 0.5);
	evas_object_size_hint_align_set(ad->buttonBox, EVAS_HINT_FILL, EVAS_HINT_FILL);
	elm_box_align_set(ad->buttonBox, 0.5, 0.5);
	elm_box_horizontal_set(ad->buttonBox, EINA_TRUE);
	elm_box_padding_set(ad->buttonBox, 3, 20);
	elm_box_pack_end(ad->box, ad->buttonBox);
	evas_object_show(ad->buttonBox);

	ad->prevButton = elm_button_add(ad->buttonBox);
	evas_object_size_hint_weight_set(ad->prevButton, EVAS_HINT_EXPAND, 0.5);
	//할당받은 공간에 맞게 버튼의 가로 세로 크기를 키운다.
	evas_object_size_hint_align_set(ad->prevButton, EVAS_HINT_FILL, EVAS_HINT_FILL);
	elm_object_text_set(ad->prevButton, "<align=center>    PREV</align>");
	evas_object_show(ad->prevButton);
	elm_box_pack_end(ad->buttonBox, ad->prevButton);

	ad->nextButton = elm_button_add(ad->buttonBox);
	evas_object_size_hint_weight_set(ad->nextButton, EVAS_HINT_EXPAND, 0.5);
	//할당받은 공간에 맞게 버튼의 가로 세로 크기를 키운다.
	evas_object_size_hint_align_set(ad->nextButton, EVAS_HINT_FILL, EVAS_HINT_FILL);
	elm_object_text_set(ad->nextButton, "<align=center>NEXT    </align>");
	evas_object_show(ad->nextButton);
	elm_box_pack_end(ad->buttonBox, ad->nextButton);


	/** **/


	ad->start = false;
	ad->milliseconds = 0;
	// 0.05초 마다 호출
	ad->timer  =  ecore_timer_add( 0.05, ticktock, ad);
	ecore_timer_freeze(ad->timer);

	elm_gesture_layer_cb_set(ad->gesture, ELM_GESTURE_N_LONG_TAPS, ELM_GESTURE_STATE_MOVE, resetCB, ad);
	elm_gesture_layer_cb_set(ad->gesture, ELM_GESTURE_N_TAPS, ELM_GESTURE_STATE_END, start_stopCB, ad);
//	evas_object_smart_callback_add(ad->content, "clicked", start_stopCB, ad);


}
