/**
 * Dependencies.
 */

var Emitter = require('emitter')
  , Test = require('./test')

/**
 * Expose `Suite`.
 */

module.exports = Suite;

/**
 * Make a new `Suite`.
 *
 * @param {String} title
 * @param {String[]|Test[]} tests
 */

function Suite(title, tests){
	var self = this;
	this.state = 'pending';
	this.title = title;
	this.addTests(tests);

	this.on('test end', function(){
		var allDone = self.tests.every(function(test){ return test.state !== 'pending' });
		if(!allDone) return;

		self.state = 'complete';
		self.emit('end');
	});
}

/**
 * Mixin `Emitter`.
 */

Emitter(Suite.prototype);

/**
 * Add tests.
 *
 * @param {Tests[]} tests
 * @return {Suite} for chaining
 */

Suite.prototype.addTests = function(tests){
	var self = this;

	this.tests || (this.tests = []);

	tests.forEach(function(test){
		if(!(test instanceof Test)) test = new Test(test);
		test.parent = self;
		self.tests.push(test);
	});

	return this;
}

Suite.prototype.length = function(){
	return this.tests.length;
}

Suite.prototype.start = function(){
	this.state = 'started';
	this.emit('start');
}

/**
 * Return the full title generated by recursively
 * concatenating the parent's full title.
 *
 * @return {String}
 * @api public
 */

Suite.prototype.fullTitle = function(){
  if (this.parent) {
    var full = this.parent.fullTitle();
    if (full) return full + ' ' + this.title;
  }
  return this.title;
};

/**
 * Pass a test.
 *
 * @param {Test} test
 * @return {Suite} for chaining
 * @api public
 */

Suite.prototype.pass = function(test){
	if(!test) return this;

	if(!this.tests.indexOf(test) === -1) {
		console.error('test not in suite');
		return this;
	}

	test.pass();
	this.emit('pass', test);
	this.emit('test end', test);
	return this;
}

/**
 * Fail a test.
 *
 * @param {Test} test
 * @return {Suite} for chaining
 * @api public
 */

Suite.prototype.fail = function(test, err){
	if(!test) return this;

	if(!this.tests.indexOf(test) === -1) {
		console.error('test not in suite');
		return this;
	}

	test.fail(err);
	this.emit('fail', test);
	this.emit('test end', test);
	return this;
}
