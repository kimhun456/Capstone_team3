
/**
 * Dependencies.
 */

var Emitter = require('emitter');

/**
 * Expose `Test`.
 */

module.exports = Test;

/**
 * Make a new `Test`.
 *
 * @param {String} title
 */

function Test(title){
	this.attrs = [];
	this.title = title;
	this.state = 'pending';
}

/**
 * Return the full title generated by recursively
 * concatenating the parent's full title.
 *
 * @return {String}
 * @api public
 */

Test.prototype.fullTitle = function(){
  return this.parent.fullTitle() + ' ' + this.title;
};

/**
 * Set an attribute.
 *
 * @param {String} key
 * @param {Object} val
 * @return {Test} for chaining
 * @api public
 */

Test.prototype.set = function(key, val){
	this.attrs[key] = val;
	return this;
}

Test.prototype.done = function(fn){
	this._done = fn;
	return this;
}

/**
 * Mark test as failed.
 *
 * @param {Error|String} err
 * @return {Test} for chaining
 */

Test.prototype.fail = function(err){
	this.err = err;
	this.end('failed');
	return this;
}

/**
 * Mark test as passed.
 *
 * @return {Test} for chaining
 */

Test.prototype.pass = function(){
	this.end('passed');
	return this;
}

/**
 * End test.
 *
 * @param {String} state
 */

Test.prototype.end = function(state){
	this.state = state || 'complete';
	if(this._done) this._done();
	this.emit('end');
}


/**
 * Unset an attribute.
 *
 * @param {String} key
 * @return {Test} for chaining
 * @api public
 */

Test.prototype.unset = function(key){
	delete this.attrs[key];
	return this;
}

/**
 * Increment an attribute.
 *
 * @param {String} key
 * @return {Test} for chaining
 * @api public
 */

Test.prototype.inc = function(key, n){
	this.attrs[key] || (this.attrs[key] = 0);
	this.attrs[key] += (typeof n == 'number' ? n : 1);
	return this;
}

/**
 * Get an attribute.
 *
 * @param {String} key
 * @return {Object} val
 * @api public
 */

Test.prototype.get = function(key){
	return this.attrs[key];
}

/**
 * Mixin `Emitter`
 */

Emitter(Test.prototype);
